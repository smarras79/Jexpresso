var documenterSearchIndex = {"docs":
[{"location":"features/performance/#Performance-of-Jexpresso-on-CPU","page":"Performance","title":"Performance of Jexpresso on CPU","text":"","category":"section"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"Jexpresso was coded to minimize memory access and speed. With the goal of making Jexpresso a community solver of PDEs, it was mandatory to make it at least as fast as a compiled-language code. Jexpresso was benchmarked against a legacy code for atmospheric modeling written in Fortran 90/95/modern Fortran. The two software packages were compared on the same CPU core.","category":"page"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"The code speed was measured for the solution of the compressible Naver-Stokes equations with gravity","category":"page"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"bf q=beginbmatrix\nrho \nrho u\nrho v\nrho theta\nendbmatrixquad bf F1=beginbmatrix\nrho u\nrho u^2 + p\nrho u v\nrho u theta\nendbmatrixquad bf F2=beginbmatrix\nrho v\nrho v u\nrho v^2 + p\nrho v theta\nendbmatrixquad bf S=beginbmatrix\n0\n0\n-rho g\n0\nendbmatrixquad munabla^2bf q=mubeginbmatrix\n0\nu_xx + u_zz\nv_xx + v_zz\ntheta_xx + theta_zz\nendbmatrix","category":"page"},{"location":"features/performance/#Speed","page":"Performance","title":"Speed","text":"","category":"section"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"Table: Wall clock time of Jexpresso vs a legacy F90/Modern Fortran code for numerical weather prediction. Simulated 100 seconds of a rising-thermal-bubble test. The name of the time integrators may be different for the two codes so that the notation jexpresso/numa is used to indicate both. The wall clock times are to be taken with a pm 02 due to a small variability from one simulation to the next one. ","category":"page"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"Timing was measured using Julia 1.9.3 on a Macbook Air M1 2020, with macOS Big Sur Version 11.6.","category":"page"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"Time integrator max Delta t (s) Effective resolution (m) Order colorredJexpresso (s) colorblueF90 (s)\nSSPRK53 0.3 \" \" 9.00 10.53\nSSPRK33 0.2 125times 125 4 9.75 9.2028\nSSPRK54 0.4 \" \" 10.47 NA\nDP5 (Dormand-Prince RK54) 0.6 \" \" 19.80 NA\nSSPRK73 0.4 \" \" 12.95 NA\nSSPRK104 0.6 \" \" 12.50 NA\nCarpenterKennedy2N54 0.4 \" \" 10.57 NA\nTsit5 2.0 (adaptive) \" \" 19.08 NA","category":"page"},{"location":"features/performance/#Mass-conservation","page":"Performance","title":"Mass conservation","text":"","category":"section"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"Table: Mass conservation of the advective vs flux forms of the equations and sensitivity to the time integrators of  DifferentialEquations.jl for the RTB at t = 1000 s viscous. Results are for inexact integration.","category":"page"},{"location":"features/performance/","page":"Performance","title":"Performance","text":"Time integrator Advection form Flux from\nMSRK5 7.818062181220379e-16 3.9090310906101895e-16\nSSPRK53 7.622610626689869e-15 1.9545155453050947e-16\nSSPRK33 5.081740417793246e-15 1.1727093271830568e-15","category":"page"},{"location":"tutorials/theta/#Tutorial:-Running-the-rising-thermal-bubble-test-case-with-Jexpresso.jl","page":"Tutorials","title":"Tutorial: Running the rising thermal bubble test case with Jexpresso.jl","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"This tutorial guides you through the process of creating a new physical problem from scratch. We will cover the necessary setup and command execution.","category":"page"},{"location":"tutorials/theta/#Prerequisites","page":"Tutorials","title":"Prerequisites","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Before starting, ensure you have the following:","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Julia Installation: You need to have Julia installed on your system. You can download it from the official Julia website: https://julialang.org/downloads/\nJexpresso Repository: The Jexpresso.jl framework needs to be accessible. This tutorial assumes you have the repository cloned locally. If not, you can clone it using Git:   bash   git clone https://github.com/smarras79/Jexpresso.git   git clone https://github.com/smarras79/JexpressoMeshes.git   cd Jexpresso   ln -s ../JexpressoMeshes/meshes .","category":"page"},{"location":"tutorials/theta/#Creating-a-New-Problem-called-Hello-in,-e.g.,-Jexpresso/problems/equations/CompEuler/","page":"Tutorials","title":"Creating a New Problem called Hello in, e.g., Jexpresso/problems/equations/CompEuler/","text":"","category":"section"},{"location":"tutorials/theta/#Step-1:-Navigate-to-the-Problems-Directory","page":"Tutorials","title":"Step 1: Navigate to the Problems Directory","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"First, open your terminal and navigate to the problems/equations/CompEuler directory within your CompEuler repository.","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"cd problems/equations/CompEuler","category":"page"},{"location":"tutorials/theta/#Step-2:-Create-a-New-Directory-for-Your-Case","page":"Tutorials","title":"Step 2: Create a New Directory for Your Case","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Next, create a new directory to house the files for your specific problem. Choose a descriptive name for Hello.","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"mkdir Hello","category":"page"},{"location":"tutorials/theta/#Step-3:-Enter-the-New-Case-Directory","page":"Tutorials","title":"Step 3: Enter the New Case Directory","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Navigate into the newly created directory.","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"cd Hello","category":"page"},{"location":"tutorials/theta/#Step-4:-Copy-Essential-Files","page":"Tutorials","title":"Step 4: Copy Essential Files","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Copy the generic solver files from the theta directory into your new case directory. These files provide the basic structure for your simulation.","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"cp ../theta/*.jl .","category":"page"},{"location":"tutorials/theta/#Step-5:-Configure-Initial-Conditions-in-initialize.jl","page":"Tutorials","title":"Step 5: Configure Initial Conditions in initialize.jl","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Open the initialize.jl file in a text editor. In this file, you will need to define and initialize the solution array q. The structure of q depends on the dimensionality of your problem and the number of conserved variables (e.g., density, momentum components, energy).","category":"page"},{"location":"tutorials/theta/#Example-for-the-2D-Euler-equations-density-(rho),-momentum-(rho-u),-and-potential-temperature","page":"Tutorials","title":"Example for the 2D Euler equations density (rho), momentum (rho u), and potential temperature","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"function initialize(SD::NSD_2D, \n                    PT, \n                    mesh::St_mesh, \n                    inputs::Dict, \n                    OUTPUT_DIR::String, \n                    TFloat)","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Define the solution variables and, optional, the array of output variables. ","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"The length of qvars will define the size of the problem.  However, the optional array qoutvars can be longer or shorter and is only used by the output writing function. If qoutvars is not defined, the the default output variables coincide with qvars.","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"    qvars    = [\"ρ\", \"ρu\", \"ρv\", \"ρθ\"]\n    qoutvars = [\"ρ\", \"u\", \"w\", \"θ\", \"p\"]","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"Allocate space for the solution array:","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"    q = define_q(SD, \n                 mesh.nelem, \n                 mesh.npoin, \n                 mesh.ngl, \n                 qvars, \n                 TFloat, \n                 inputs[:backend]; \n                 neqs=length(qvars), \n                 qoutvars=qoutvars)","category":"page"},{"location":"tutorials/theta/#Now-initialize:","page":"Tutorials","title":"Now initialize:","text":"","category":"section"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"For example, a minimal version of Jepresso/problems/equations/CompEuler/theta/initialize.jl: may looks like this:","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"    if (inputs[:backend] == CPU())    \n        PhysConst = PhysicalConst{Float64}()\n        \n            xc = 0.0; yc = 2500.0\n        \n            for ip = 1:mesh.npoin\n\n                x, y = mesh.x[ip], mesh.y[ip]\n                r = sqrt( (x - xc)^2 + (y - yc)^2 )\n            \n                θ = 300\n                p = 100000\n                ρ = 1.25\n\n                u = 0.0\n                v = 0.0\n\n                q.qn[ip,1] = ρ\n                q.qn[ip,2] = ρ*u\n                q.qn[ip,3] = ρ*v\n                q.qn[ip,4] = ρ*θ\n                q.qn[ip,end] = p\n\n            end\n        end\n    return q\nend","category":"page"},{"location":"tutorials/theta/","page":"Tutorials","title":"Tutorials","text":"WARNING: refer to a proper working code rather than the simplified version above. The one above was given as an example of what an initialization file may look like.","category":"page"},{"location":"features/best-practices/#Best-practices-to-prevent-performance-deterioration","page":"Best practices","title":"Best practices to prevent performance deterioration","text":"","category":"section"},{"location":"features/best-practices/","page":"Best practices","title":"Best practices","text":"This section wants to give some non-comprehensive best-practice suggestions to prevent performance deterioration when new code is added or old code is modified.","category":"page"},{"location":"features/best-practices/","page":"Best practices","title":"Best practices","text":"Clearly, more thorough information on Julia performance can be found online, but here we report those that we learned during the implementation of Jexpresso.","category":"page"},{"location":"features/best-practices/#Vectors-vs-tuples:","page":"Best practices","title":"Vectors vs tuples:","text":"","category":"section"},{"location":"features/best-practices/","page":"Best practices","title":"Best practices","text":"do not abuse tuples. For example, the user_inputs.jl files that conbtain the setups for each problem case activate artificial diffusion as follows:","category":"page"},{"location":"features/best-practices/","page":"Best practices","title":"Best practices","text":"        :lvisc            => true,\n        :ivisc_equations  => [1, 2, 3, 4],\n        :μ                => [0.0, 20.0, 20.0, 60.0],","category":"page"},{"location":"features/best-practices/","page":"Best practices","title":"Best practices","text":"where the value of the diffusivity coefficient (μ) is given for each equation (ivisc_equations).","category":"page"},{"location":"features/best-practices/","page":"Best practices","title":"Best practices","text":"Notice that these are stored as arrays ([...]). While the code still works if we used tuples instead ((...)), performance would drasticially deterioriate due to unnecessary allocation at runtime. Notice that tuples are perfectly fine to be used, as long as they are used where really needed.","category":"page"},{"location":"Jexpresso/#Jexpresso","page":"Jexpresso","title":"Jexpresso","text":"","category":"section"},{"location":"Jexpresso/#Jexpresso","page":"Jexpresso","title":"Jexpresso","text":"A research software for the numerical solution of a system of an arbitrary number of conservation laws using continuous spectral elements. DISCLAIMER: this is WIP and only 2D is being maintained until parallelization is complete.\n\nIf you are interested in contributing, please get in touch. Simone Marras, Yassine Tissaoui\n\n\n\n\n\n","category":"module"},{"location":"tutorials/user_inputs/#user_inputs.jl","page":"User inputs","title":"user_inputs.jl","text":"","category":"section"},{"location":"tutorials/user_inputs/","page":"User inputs","title":"User inputs","text":"Every user-defined problem has its own namelist/input file called user_inputs.jl. A sample userinputs.jl file with all possible entries (notice that not all entries are necessary). Use # to comment a line. When a line is commented or not explicitaly give, default values will be used.  The entries (with default values) are defined in `src/io/modinputs.jl`.","category":"page"},{"location":"tutorials/user_inputs/","page":"User inputs","title":"User inputs","text":"function user_inputs()\n    \n    inputs = Dict(\n        #---------------------------------------------------------------------------\n        # User define your inputs below: the order doesn't matter\n        #---------------------------------------------------------------------------\n        :ode_solver           => SSPRK54(), #From the suite of solvers of \n        :Δt                   => 0.4,\n        :tinit                => 0.0,\n        :tend                 => 1000.0,\n        #:tinit                => 100.0,\n        #:tend                 => 1000.0,\n        #:lrestart             => true,\n        :restart_input_file_path => \"./output/CompEuler/theta/\",\n        :diagnostics_at_times => (0:100:1000),\n        :lsource              => true, \n        #:backend              => MetalBackend(),\n        #:SOL_VARS_TYPE        => PERT(), #TOTAL() is default\n        #---------------------------------------------------------------------------\n        #Integration and quadrature properties\n        #---------------------------------------------------------------------------\n        :interpolation_nodes =>\"lgl\",\n        :nop                 => 4,      # Polynomial order\n        #---------------------------------------------------------------------------\n        # Physical parameters/constants:\n        #---------------------------------------------------------------------------\n        :lvisc                => true,                   #false by default\n        :ivisc_equations      => [1, 2, 3, 4],           # use [], not ()!\n        :μ                   => [0.0, 20.0, 20.0, 60.0], # use [], not ()!\n        #---------------------------------------------------------------------------\n        # Filter parameters\n        #---------------------------------------------------------------------------\n        #:lfilter             => true,\n        #:mu_x                => 0.01,\n        #:mu_y                => 0.01,\n        #:filter_type         => \"erf\",\n\t#---------------------------------------------------------------------------\n        # Mesh paramters and files:\n        #---------------------------------------------------------------------------\n        :lread_gmsh          => true, #If false, a 1D problem will be enforced\n        :gmsh_filename       => \"./meshes/gmsh_grids/hexa_TFI_RTB20x20.msh\",\n\t#---------------------------------------------------------------------------\n\t# init_refinement\n\t#---------------------------------------------------------------------------\n\t# When true this takes the input mesh (which can be as coarse as you'd like)\n\t# and statically refine it as many times as the value of :init_refine_lvl\n\t# E.g. Given a grid of 20x10x3 elements, \n\t#  :init_refine_lvl => 1 will generate a 40x20x6 grid (octree)\n\t#---------------------------------------------------------------------------\n\t:linitial_refine     => false,\n\t:init_refine_lvl     => 1,\n\t#---------------------------------------------------------------------------\n        # AMR: Adaptive Mesh Refinement (different from initial_refinement)\n        #---------------------------------------------------------------------------\n        :ladapt              => false,\n        :amr_freq            => 200, #AMR is triggered every :amr_freq steps\n        :amr_max_level       => 2,   #levels of oct/quadtree subdivisions\n\t#---------------------------------------------------------------------------\n        # Plotting parameters\n        #---------------------------------------------------------------------------\n        :outformat           => \"vtk\",\n        :loverwrite_output   => true,\n        :lwrite_initial      => false,\n        :output_dir          => \"./output\",\n        #:output_dir          => \"./test/CI-run\",\n        :loutput_pert        => true,  #this is only implemented for VTK for now\n        #---------------------------------------------------------------------------\n    ) #Dict\n    #---------------------------------------------------------------------------\n    # END User define your inputs below: the order doesn't matter\n    #---------------------------------------------------------------------------\n\n    return inputs\n    \nend","category":"page"},{"location":"#Jexpresso.jl","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Documentation of Jexpresso.jl.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"note: Note\nThis documentation is and will always be WIP!","category":"page"},{"location":"#Introduction","page":"Jexpresso.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Jexpresso is a CPU/GPU research software for the numerical solution of a system of arbitrary conservation laws in 1D, 2D, 3D using continuous spectral elements (SEM). Nevertheless, the code is built so that any other numerical method can be added. For example, the Jexpresso already contains a 1D finite difference implementation as well.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Jexpresso is written in the Julia programming language and was thought to be modular and allow any user to add any equations in any dimensions without knowing anything about numerical methods. ","category":"page"},{"location":"#Do-I-need-to-know-Julia-to-use-Jexpresso?","page":"Jexpresso.jl","title":"Do I need to know Julia to use Jexpresso?","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Yes and no. It depends how much you are interested in adding your own equation set in the code rather than using it as a black box. ","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The following are useful resources about Julia:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Julia webpage docs.julialang.org\nOfficial list of learning resources julialang.org/learning","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Pages = [\n  \"Jexpresso.md\",\n  ]","category":"page"},{"location":"#Equations:","page":"Jexpresso.jl","title":"Equations:","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Jexpresso uses arbitrarily high-order (3rd and above) continuous spectral elements to solve","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"fracpartial bf qpartial t + sum_i=1^ndnablacdotbf F_i(bf q) = munabla^2bf q + bf S(bf q) + rm bc","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"where the vectors bf q, bf F, and bf S are problem-dependent as shown below, and are taken to be zero vectors of the appropriate size when not explicitly stated otherwise.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The Julia package DifferentialEquations.jl is used for time discretization and stepping.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"In order, we provide tests and results for the following equations:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"1D wave equation:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"bf q=beginbmatrix\nu \nv\nendbmatrixquad bf F=beginbmatrix\nv\nu\nendbmatrix","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"2: 1D shallow water:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"bf q=beginbmatrix\nh \nu\nendbmatrixquad bf F=beginbmatrix\nUh + Hu\ngh + Uu\nendbmatrix","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"where H and U are a reference height and velocity, respectively.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"2D Helmholtz:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"bf S=beginbmatrix\nalpha^2 u + f(xz)\nendbmatrixquad munabla^2bf q=mubeginbmatrix\nu_xx + u_zz\nendbmatrix","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"for a constant value of alpha and mu, which are case-dependent.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"2D scalar advection-diffusion:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"bf q=beginbmatrix\nq\nendbmatrixquad bf F=beginbmatrix\nqu\nendbmatrixquad bf F=beginbmatrix\nqv\nendbmatrixquad munabla^2bf q=mubeginbmatrix\nq_xx + q_zz\nendbmatrix","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"2D Euler equations of compressible flows with gravity and N passive chemicals c_i forall i=1N ","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"bf q=beginbmatrix\nrho \nrho u\nrho v\nrho theta\nrho c1\n\nrho cN\nendbmatrixquad bf F1=beginbmatrix\nrho u\nrho u^2 + p\nrho u v\nrho u theta\nrho u c1\n\nrho u cN\nendbmatrixquad bf F2=beginbmatrix\nrho v\nrho v u\nrho v^2 + p\nrho v theta\nrho v c1\n\nrho v cN\nendbmatrixquad bf S=beginbmatrix\n0\n0\n-rho g\n0\n0\n\n0\nendbmatrixquad munabla^2bf q=mubeginbmatrix\n0\nu_xx + u_zz\nv_xx + v_zz\ntheta_xx + theta_zz\nc1_xx + c1_zz\n\ncN_xx + cN_zz\nendbmatrix","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The equation of state for a perfect gas is used to close the system.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"3D Euler equations of compressible flows with gravity","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"bf q=beginbmatrix\nrho \nrho u\nrho v\nrho w\nrho theta\nendbmatrixquad bf F1=beginbmatrix\nrho u\nrho u^2 + p\nrho u v\nrho u w\nrho u theta\nendbmatrixquad bf F2=beginbmatrix\nrho v\nrho v u\nrho v^2 + p\nrho v w\nrho v theta\nendbmatrixquad bf F3=beginbmatrix\nrho w\nrho w u\nrho w v\nrho w^2 + p\nrho w theta\nendbmatrixquad bf S=beginbmatrix\n0\n0\n0\n-rho g\n0\nendbmatrixquad munabla^2bf q=mubeginbmatrix\n0\nu_xx + u_yy + u_zz\nv_xx + v_yy + v_zz\nw_xx + w_yy + w_zz\ntheta_xx + theta_yy + theta_zz\nendbmatrix","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"If you are interested in contributing, please get in touch: Simone Marras, Yassine Tissaoui","category":"page"},{"location":"#Some-notes-on-using-JEXPRESSO","page":"Jexpresso.jl","title":"Some notes on using JEXPRESSO","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"To install and run the code assume Julia 1.10.0","category":"page"},{"location":"#Setup-with-CPUs","page":"Jexpresso.jl","title":"Setup with CPUs","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"cd $JEXPRESSO_HOME\njulia --project=. -e \"using Pkg; Pkg.instantiate(); Pkg.API.precompile()\"","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"followed by the following:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Push problem name to ARGS You need to do this only when you run a new problem","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), EQUATIONS::String, EQUATIONS_CASE_NAME::String);\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"PROBLEMNAME is the name of your problem directory as JEXPRESSO/problems/equations/problemname\nPROBLEMCASENAME is the name of the subdirectory containing the specific setup that you want to run: ","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The path would look like  $JEXPRESSO/problems/equations/PROBLEM_NAME/PROBLEM_CASE_NAME","category":"page"},{"location":"#Tutorials","page":"Jexpresso.jl","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The following tutorials will introduce you to the functionality of Jexpresso.jl.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Pages = [\n    \"features/performance.md\",\n    \"tutorials/user_inputs.md\",\n    \"tutorials/theta.md\",\n    \"tutorials/laguerre_paper.md\",\n    ]\nDepth = 2","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Example 1: to solve the 2D Euler equations with buyoancy and two passive tracers defined in problems/equations/CompEuler/thetaTracers you would do the following:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"CompEuler\", \"thetaTracers\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/thetaTracersMesh.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 5px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Example 2: to solve the 2D Euler equations leading to a density current defined in problems/equations/CompEuler/dc you would do the following:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"CompEuler\", \"dc\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/dc.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Example 3: to solve the 1D wave equation  defined in problems/equations/CompEuler/wave1d you would do the following:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"CompEuler\", \"wave1d\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/wave1d-v.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"For ready to run tests, there are the currently available equations names:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"CompEuler (option with total energy and theta formulation)","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The code is designed to create any system of conservsation laws. See CompEuler/case1 to see an example of each file. Details will be given in the documentation (still WIP). Write us if you need help.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"More are already implemented but currently only in individual branches. They will be added to master after proper testing.","category":"page"},{"location":"#Laguerre-semi-infinite-element-test-suite","page":"Jexpresso.jl","title":"Laguerre semi-infinite element test suite","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"This section contains instructions to run all of the test cases presented in","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"@article{tissaoui2025,\n  author = {Y. Tissaoui and J. F. Kelly and S. Marras}\n  title = {Efficient Spectral Element Method for the Euler Equations on Unbounded Domains},\n  volume ={487},\n  pages={129080},\n  year = {2025},\n  journal = {App. Math. Comput.},\n}","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Test 1: 1D wave equation with Laguerre semi-infinite element absorbing layers","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The problem is defined in problems/CompEuler/wave1d_lag and by default output will be written to output/CompEuler/wave1d_lag. To solve this problem run the following commands from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"CompEuler\", \"wave1d_lag\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/wavev4.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Test 2: 1D wave train for linearized shallow water equations","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The problem is defined in problems/equations/AdvDiff/Wave_Train and by default output will be written to output/AdvDiff/Wave_Train. To solve this problem run the following commands from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"AdvDiff\", \"Wave_Train\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/WaveTrainfinal.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"A second version of this tests generate images with the solutions at different times overlapped.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"This version is defined in problems/equations/AdvDiff/Wave_Train_Overlapping_Plot and by default output will be written to output/AdvDiff/Wave_Train_Overlapping_Plot. To run this version of the problem execute the following from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"AdvDiff\", \"Wave_Train_Overlapping_Plot\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/WaveTrainoverlap.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Test 3: 2D advection-diffusion equation","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The problem is defined in problems/equations/AdvDiff/2D_laguerre and by default output will be written to output/AdvDiff/2D_laguerre. To solve this problem run the following commands from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"AdvDiff\", \"2D_laguerre\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/ad2d-4s-line.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Test 4: 2D Helmholtz equation","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The problem is defined in problems/equations/Helmholtz/case1 and by default output will be written to output/Helmholtz/case1. To solve this problem run the following commands from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"Helmholtz\", \"case1\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/Helmholtzfromjexpresso-line.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Test 5: Rising thermal bubble","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The problem is defined in problems/equations/CompEuler/theta_laguerre and by default output will be written to output/CompEuler/theta_laguerre. To solve this problem run the following commands from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"CompEuler\", \"theta_laguerre\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/48.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Test 6: Hydrostatic linear mountain waves","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"The problem is defined in problems/equations/CompEuler/HSmount_Lag_working and by default output will be written to output/CompEuler/HSmount_Lag_working. To solve this problem run the following commands from the Julia command line:","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"push!(empty!(ARGS), \"CompEuler\", \"HSmount_Lag_working\");\ninclude(\"./src/Jexpresso.jl\")","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"<img src=\"assets/wvelo.png\"      alt=\"Markdown icon\"      style=\"float: left; margin-right: 7px;\" />","category":"page"},{"location":"#Plotting","page":"Jexpresso.jl","title":"Plotting","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Files can be written to VTK (recommended) or png. For the png plots, we use Makie. If you want to use a different package, modify ./src/io/plotting/jplots.jl accordinly.","category":"page"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"For non-periodic 2D tests, the output can also be written to VTK files by setting the value \"vtk\" for the usier_input key :outformat","category":"page"},{"location":"#Contacts","page":"Jexpresso.jl","title":"Contacts","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Simone Marras, Yassine Tissaoui","category":"page"},{"location":"#Manual","page":"Jexpresso.jl","title":"Manual","text":"","category":"section"},{"location":"","page":"Jexpresso.jl","title":"Jexpresso.jl","text":"Pages = [\"Jexpresso.md\"]","category":"page"}]
}
